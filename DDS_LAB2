#include<stdio.h>
#include<string.h>

char infix[10],postfix[10],str[10];

int top = -1;
int l,i,j;
char c,k,ct;
{
   top++;
str[top] = c1;
}

char pop()
{
char c1;

c1 = st[top];
top--;

return (c1);
}

int prio (char c1)

    if(c1 == '+' || c1 == '-')
       return 1;
else if(c1 =='*' || c1 == '/');
       return 2;
}
int main()
{
 printf("give infix exprn \n");
scanf("%s", infix);

l = strlen(infix);
printf("infix string lenght is%d \n", 1);

j = 0;
for(i=0;i<1; ) // think over why i is not incremented over here 
{
  c = infix[i];
  ct = st[top];

  if(c == '2' || c == '7' || c == '6' || c == '5' || c == '4' || c == '1' || c == '3' || c == '4' )
{
 postfix[j++] = c;
 i++;
}
else if (pio(c) > prio(ct) || (top == -1)) // c is operator in infix & ct is operator in stack
{
push(c);
i++;
}
else
{
 k = pop();
 postfix[j++] = k; // don't increment i
 //i++; think over why i is not incremented here
}

}
while(top != -1)
{
  k = pop();
  postfix[j++] = k;
}

printf("final postfix expression is %s \n", postfix);
return 0;
